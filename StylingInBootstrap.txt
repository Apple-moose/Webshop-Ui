0-Datetime now() formatting

npm install dateformat

2. import dateFormat from 'dateformat';
3. dateFormat("2019-04-30T08:59:00.000Z", "mmmm dS, yyyy") 
to get April 30th, 2019
or dateFormat("2019-04-30T08:59:00.000Z", "dddd, mmmm dS, yyyy") 
to get Tuesday, April 30th, 2019.



1-Bootstrap

Well-known CSS framework called Bootstrap.

document Page at:
 https://getbootstrap.com/docs/4.4/layout/overview/

ðŸ‘‰ Install Bootstrap
npm i bootstrap@5.3.3


2-Sass

Instead of writing vanilla CSS (just ordinary CSS), we're going 
to use a slightly enhanced version of CSS called Sass. 
This will make it a bit easier to customize the overall 
theme of our app because Sass has variables which CSS does 
not. Bootstrap is built with Sass and uses a bunch of 
variables that we can override in order to customize it.

ðŸ‘‰ Install Sass

npm install sass --save-dev

3-Create files

// src/style/_config.scss

@import url("https://fonts.googleapis.com/css?family=Roboto+Slab:800|Libre+Baskerville:400,400i,700,700i&display=swap");

$headings-font-family: "Roboto Slab", serif;
$headings-font-weight: 800;

$font-family-base: "Libre Baskerville", serif;

// src/style/global.scss

@import "./config";
@import "~bootstrap";


4-Import this global.scss in our index.js entry file, 
replacing it for the index.css import:

-import "./index.css";
+import "./style/global.scss";


5- Deciding how wide (in 1/12th fractions) each column 
should be. Update the App component to display its contents 
in a grid structure.
 We need the .container class to surround all the content. 
 This visually centres the content in the middle of the screen. 
 Then, we want to place the Element in a grid. So, we first add 
 a .row around all the Element and add each Element separately 
 into a column.

For each column, we specify how wide that column should be, 
depending on the screen size of the browser the user is 
using. This makes the design responsive: it adapts to the 
size of the user's screen. 
Bootstrap has four "break-off" points, making it an 
adaptive grid: small (â‰¥ 576px wide), medium (â‰¥ 768px wide), 
large (â‰¥ 992px wide), and extra large (â‰¥ 1200px wide).

In this case, we're telling Bootstrap to give each 
Element a column that is:

Either the full width of the container (the "default case")

Or, if the screen is at least medium size (â‰¥ 768px wide), 
then 6/12 = 1/2 of the width of the container

Or, if the screen is at least large size (â‰¥ 992px wide), 
then 4/12 = 1/3 of the width of the container

  return (
    <main className="container">
      <Title content="Some Simple Title" />
      <div className="row">
        {all_element.map((Element, index) => (
          <div key={index} className="col-md-6 col-lg-4">
            <Element
              name={Element.name}
              weight={Element.weight}
              ...
            />
          </div>
        ))}
      </div>
    </main>
  );


6- Components

Are "typical visual elements" that designers talk about 
when discussing a design. For example, the Card, 
the Breadcrumb, or the Tooltip. 

(Noticed that in React we need to write 
className whereas the HTML attribute is called class.)

export default function Element(props) {
  return (
    <div className="card">
      <div className="card-body">
        <h5 className="card-title">{props.name}</h5>
        <h6 className="card-subtitle">
          {props.awesome ? "An awesome Element" : "Not awesome"}
        </h6>
        <p>
          Weight: {props.weight} kg
          <br />
          Terrifying: {props.terrifying ? "Very" : "nah, lovable"}
          <br />
          {props.abilities.length} abilities
        </p>
      </div>
      <ul className="list-group list-group-flush">
        {props.abilities.map((ability, index) => {
          return (
            <li key={index} className="list-group-item">
              {ability}
            </li>
          );
        })}
      </ul>
    </div>
  );
}


7- Spacing Utilities
These are helper classes that you can use to add margin 
and padding to your elements. 
The CSS box model describes how each HTML element has a 
margin ("breathing space around the element"), a border, 
and then a padding. 
  improve the Element component a bit by adding some of 
  these spacing utilities where necessary, a card shadow, 
  and some colours.

export default function Element(props) {
  return (
 -> <div className="card shadow-sm mb-4">
      <div className="card-body pb-0">
        <h5 className="card-title">{props.name}</h5>
        <h6 className="card-subtitle mb-3 text-primary">
          {props.awesome ? "An awesome Element" : "Not awesome"}
        </h6>
 ->     <p className="mb-0">
          Weight: {props.weight} kg
          <br />
          Terrifying: {props.terrifying ? "Very" : "nah, lovable"}
          <br />
          {props.abilities.length} abilities
        </p>
      </div>
      <ul className="list-group list-group-flush">
        {props.abilities.map((ability, index) => {
          return (
            <li key={index} className="list-group-item">
              {ability}
            </li>
          );
        })}
      </ul>
    </div>
  );
}


8- Hover features exemple:

// src/components/Element.scss

.Element {
  transition: transform 0.2s ease;
}
.Element:hover {
  transform: scale(1.02) translate(0, -3px);
}